name: Build SQLCipher (Windows MinGW-w64)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'SQLCipher tag (ex: v4.10.0)'
        required: true
        default: 'v4.10.0'

jobs:
  build-win:
    runs-on: windows-latest

    steps:
      - name: üì• Clonar reposit√≥rio
        uses: actions/checkout@v4

      - name: üß© Instalar MSYS2 e depend√™ncias
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: >-
            base-devel
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-openssl
            mingw-w64-x86_64-make
            autoconf
            automake
            libtool
            tcl

      - name: üì¶ Baixar SQLCipher
        shell: pwsh
        run: |
          $tag = "${{ github.event.inputs.tag }}"
          echo "üîπ Baixando SQLCipher vers√£o $tag..."
          Invoke-WebRequest -Uri "https://github.com/sqlcipher/sqlcipher/archive/refs/tags/$tag.zip" -OutFile "sqlcipher.zip"
          Expand-Archive sqlcipher.zip -DestinationPath .
          Rename-Item -Path "sqlcipher-$tag" -NewName "sqlcipher"
          echo "‚úÖ Extra√ß√£o conclu√≠da!"

      - name: üîπ Detectar e gerar sqlite3.c e shell.c
        shell: pwsh
        run: |
          echo "üîπ Procurando diret√≥rio que cont√©m 'configure'..."
          $configurePath = Get-ChildItem -Recurse -Filter configure | Select-Object -First 1
          if (-not $configurePath) { throw "‚ùå Arquivo 'configure' n√£o encontrado em lugar nenhum!" }

          $configureDir = Split-Path $configurePath.FullName
          echo "üìÅ Diret√≥rio detectado: $configureDir"

          echo "üîπ Garantindo que gcc e make estejam dispon√≠veis no bash..."
          C:\msys64\usr\bin\bash -lc "echo 'gcc path:' && which gcc || echo '‚ö†Ô∏è gcc n√£o encontrado' && echo 'make path:' && which make || echo '‚ö†Ô∏è make n√£o encontrado'"

          echo "üîπ Gerando arquivos sqlite3.c e shell.c manualmente..."
          C:\msys64\usr\bin\bash -lc "export PATH=/mingw64/bin:/usr/bin:\$PATH && cd '$configureDir' && ./configure --enable-tempstore=yes CFLAGS='-DSQLITE_HAS_CODEC' && make sqlite3.c shell.c"

      - name: ‚öôÔ∏è Compilar SQLCipher (DLL e EXE)
        shell: pwsh
        run: |
          echo "üîπ Ajustando PATH..."
          $env:PATH = "C:\msys64\mingw64\bin;$env:PATH"

          cd sqlcipher
          if (-not (Test-Path "sqlite3.c")) { throw "‚ùå Arquivo sqlite3.c n√£o encontrado!" }
          if (-not (Test-Path "shell.c")) { throw "‚ùå Arquivo shell.c n√£o encontrado!" }

          echo "üîπ Compilando biblioteca principal (DLL)..."
          gcc -O2 -DSQLITE_HAS_CODEC -DSQLCIPHER_CRYPTO_OPENSSL -DSQLITE_TEMP_STORE=2 -DHAVE_STDINT_H -I. sqlite3.c -shared -o sqlcipher.dll -L/mingw64/lib -lcrypto -lssl

          echo "üîπ Compilando execut√°vel CLI..."
          gcc -O2 -DSQLITE_HAS_CODEC -DSQLCIPHER_CRYPTO_OPENSSL -DSQLITE_TEMP_STORE=2 -DHAVE_STDINT_H -I. shell.c -o sqlcipher.exe -L/mingw64/lib -lcrypto -lssl

          echo "‚úÖ Compila√ß√£o conclu√≠da!"

      - name: üì¶ Criar artefato ZIP
        run: |
          mkdir build
          copy sqlcipher\sqlcipher.dll build\
          copy sqlcipher\sqlcipher.exe build\
          Compress-Archive -Path build\* -DestinationPath sqlcipher-windows.zip

      - name: üì§ Publicar artefato
        uses: actions/upload-artifact@v4
        with:
          name: sqlcipher-windows
          path: sqlcipher-windows.zip
