set -euo pipefail

echo "üîπ Clonando SQLCipher tag: $TAG"
git clone https://github.com/sqlcipher/sqlcipher.git
cd sqlcipher
git checkout "$TAG"

echo "üîπ Configurando build est√°tico..."

# ‚öôÔ∏è Flags de compila√ß√£o ‚Äî sem aspas internas
export CFLAGS=-O2\ -DSQLITE_HAS_CODEC\ -DSQLCIPHER_CRYPTO_OPENSSL\ -DSQLITE_THREADSAFE=1\ -DSQLITE_TEMP_STORE=2\ -I/mingw64/include
export LDFLAGS=-static\ -L/mingw64/lib\ -lssl\ -lcrypto\ -lz\ -lws2_32\ -lgdi32\ -lcrypt32

echo "CFLAGS: $CFLAGS"
echo "LDFLAGS: $LDFLAGS"

# ‚öôÔ∏è Executa configure passando as flags como vari√°veis
./configure \
  --enable-shared \
  --disable-tcl \
  CFLAGS="$CFLAGS" \
  LDFLAGS="$LDFLAGS" \
  || { echo '‚ö†Ô∏è configure falhou'; cat config.log | head -n 50 || true; exit 1; }

echo "üîπ Compilando..."
make -j"$(nproc)" || { echo '‚ùå make falhou'; exit 1; }

echo "üîπ Copiando build final..."
mkdir -p ../build-output
cp sqlite3 ../build-output/sqlcipher.exe

echo "‚úÖ Build finalizado! Bin√°rio pronto em: build-output/sqlcipher.exe"
